#!/bin/bash




logging()
{
operation=$1

logfile="./logfile.txt"

timestamp=$(date)

sudo echo "[$timestamp] $operation" >> "$logfile"
}






create_user() {
	read -p "Enter username: " username
   	
   	sudo adduser $username --disabled-password 
   	#passwrd change
   	sudo passwd "$username"
   	logging "Create user"
    
}



modify_user() {
logging "Modifying User"

while true; do
#check if user exists 
read -p "Enter username: " username
#use if with id directly if already checks for the exit code.
if id "$username" &>/dev/null; then
    echo 'user found'
    break
else
    echo 'user not found, try again'
fi
done

 echo "Select what to modify:"
        echo "1. Username"
        echo "2. Password"
        echo "3. UID"
        echo "4. Cancel"
        
        read -p "Enter your choice: " choice
        
        case $choice in
            1) modify_username $username ;;
            2) modify_password $username ;;
            3) modify_uid $username ;;
            4) echo "Operation canceled." ;;
            *) echo "Invalid choice." ;;
        esac




 
: ;}

modify_username() {
current_username=$1 #arg
read -p "Enter new username: " new_username

if id "$new_username" &>/dev/null; then
echo "username exists already"
else
sudo usermod -l $new_username $current_username
fi
}



modify_password() {
    current_username=$1
    read -p "Enter new password: " new_password
    
    # Add code to modify the password of the user account
    echo "$current_username:$new_password" | sudo chpasswd
    
  
}




modify_uid() {

current_username=$1
read -p "Enter new UID: " uid
sudo usermod -u $uid $current_username

}








delete_user()
 {
 logging "Deleting user"
   read -p "Enter username: " username
   if id "$username" &>/dev/null; then
   	if [ "$username" != "$(whoami)" ]; then
   		sudo deluser "$username"
   	else
   		echo "probablky shouldnt delete the logged in user right?"
   	fi
   
   else
   echo "User does not exist"
   fi
    
}


























display_user() {
   w
   id
}


create_users_from_file() {
	logging "creating users from file"
    read -p "Enter the path to the file containing usernames: " file_path

	while IFS= read -r username; do
	create_user "$username"
	done < "$file_path"
}


delete_users_from_file() {
   read -p "Enter the path to the text file: " file_path
    
    # Check if the file exists
    if [ -f "$file_path" ]; then
        # Read the file line by line and delete user accounts
        while IFS= read -r username; do
            # Delete the user account
            delete_user "$username"
        done < "$file_path"
    else
        echo "File does not exist."
    fi
}



# Function to monitor file modifications within a specified date range
monitor_file_modifications() {
   read -p "Enter the start date (YYYY-MM-DD): " start_date
   read -p "Enter the end date (YYYY-MM-DD): " end_date
   echo "files modified"

    find . -newermt "$start_date" ! -newermt "$end_date"
}
# 2023-06-01
# 2023-05-31
# Main script
echo "User Account Management or file monitoring Script"
touch logfile.txt

while true; do
    echo "Textual Mode:"
    echo "1. User Account Management"
    echo "2. Server Usage Monitoring"
    echo "3. Quit"

    read -p "Choose the mode: " mode

    case $mode in
        1)
            while true; do
                echo "User Account Management:"
                echo "1. Create User"
                echo "2. Modify User"
                echo "3. Delete User"
                echo "4. Display User"
                echo "5. Create Users from File"
                echo "6. Delete Users from File"
                echo "7. Back"

                read -p "Choose an action: " action

                case $action in
                    1) create_user ;;
                    2) modify_user ;;
                    3) delete_user ;;
                    4) display_user ;;
                    5) create_users_from_file ;;
                    6) delete_users_from_file ;;
                    7) break ;;
                    *) echo "Invalid choice. Please try again." ;;
                esac
            done
            ;;
        2)
            echo "Server Usage Monitoring:"
            monitor_file_modifications
            ;;
        3)
            exit
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
done
